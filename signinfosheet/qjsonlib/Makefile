#############################################################################
# Makefile for building: libqjson.so.1.0.0
# Generated by qmake (2.01a) (Qt 4.8.4) on: ?? 12? 20 10:28:39 2018
# Project:  qjson.pro
# Template: lib
# Command: /usr/lib/i386-linux-gnu/qt4/bin/qmake -o Makefile qjson.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQJSON_MAKEDLL -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1 -shared -Wl,-soname,libqjson.so.1
LIBS          = $(SUBLIBS)  -L/usr/lib/i386-linux-gnu -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/lib/i386-linux-gnu/qt4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = parser.cpp \
		qobjecthelper.cpp \
		json_scanner.cpp \
		json_parser.cc \
		parserrunnable.cpp \
		serializer.cpp \
		serializerrunnable.cpp moc_serializerrunnable.cpp \
		moc_parserrunnable.cpp
OBJECTS       = parser.o \
		qobjecthelper.o \
		json_scanner.o \
		json_parser.o \
		parserrunnable.o \
		serializer.o \
		serializerrunnable.o \
		moc_serializerrunnable.o \
		moc_parserrunnable.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		qjson.pro
QMAKE_TARGET  = qjson
DESTDIR       = 
TARGET        = libqjson.so.1.0.0
TARGETA       = libqjson.a
TARGETD       = libqjson.so.1.0.0
TARGET0       = libqjson.so
TARGET1       = libqjson.so.1
TARGET2       = libqjson.so.1.0

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile  $(TARGET)

$(TARGET):  $(OBJECTS) $(SUBLIBS) $(OBJCOMP)  
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)
	cp -ap libqjson.so* ../../../output/lib/



staticlib: $(TARGETA)

$(TARGETA):  $(OBJECTS) $(OBJCOMP) 
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS)

Makefile: qjson.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/i386-linux-gnu/libQtGui.prl \
		/usr/lib/i386-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile qjson.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/i386-linux-gnu/libQtGui.prl:
/usr/lib/i386-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile qjson.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/qjson1.0.0 || $(MKDIR) .tmp/qjson1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/qjson1.0.0/ && $(COPY_FILE) --parents parser.h qobjecthelper.h serializer.h serializerrunnable.h qjson_export.h parserrunnable.h .tmp/qjson1.0.0/ && $(COPY_FILE) --parents parser.cpp qobjecthelper.cpp json_scanner.cpp json_parser.cc parserrunnable.cpp serializer.cpp serializerrunnable.cpp .tmp/qjson1.0.0/ && (cd `dirname .tmp/qjson1.0.0` && $(TAR) qjson1.0.0.tar qjson1.0.0 && $(COMPRESS) qjson1.0.0.tar) && $(MOVE) `dirname .tmp/qjson1.0.0`/qjson1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/qjson1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) ../../../output/lib/libqjson.so*
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) $(TARGET0) $(TARGET1) $(TARGET2) $(TARGETA)
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_serializerrunnable.cpp moc_parserrunnable.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_serializerrunnable.cpp moc_parserrunnable.cpp
moc_serializerrunnable.cpp: qjson_export.h \
		serializerrunnable.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) serializerrunnable.h -o moc_serializerrunnable.cpp

moc_parserrunnable.cpp: qjson_export.h \
		parserrunnable.h
	/usr/lib/i386-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) parserrunnable.h -o moc_parserrunnable.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

parser.o: parser.cpp parser.h \
		qjson_export.h \
		parser_p.h \
		json_parser.hh \
		stack.hh \
		json_scanner.h \
		qjson_debug.h \
		location.hh \
		position.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o parser.o parser.cpp

qobjecthelper.o: qobjecthelper.cpp qobjecthelper.h \
		qjson_export.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qobjecthelper.o qobjecthelper.cpp

json_scanner.o: json_scanner.cpp qjson_debug.h \
		json_scanner.h \
		parser_p.h \
		parser.h \
		qjson_export.h \
		json_parser.hh \
		stack.hh \
		location.hh \
		position.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o json_scanner.o json_scanner.cpp

json_parser.o: json_parser.cc json_parser.hh \
		stack.hh \
		parser_p.h \
		parser.h \
		qjson_export.h \
		json_scanner.h \
		qjson_debug.h \
		location.hh \
		position.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o json_parser.o json_parser.cc

parserrunnable.o: parserrunnable.cpp parserrunnable.h \
		qjson_export.h \
		parser.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o parserrunnable.o parserrunnable.cpp

serializer.o: serializer.cpp serializer.h \
		qjson_export.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o serializer.o serializer.cpp

serializerrunnable.o: serializerrunnable.cpp serializerrunnable.h \
		qjson_export.h \
		parserrunnable.h \
		serializer.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o serializerrunnable.o serializerrunnable.cpp

moc_serializerrunnable.o: moc_serializerrunnable.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_serializerrunnable.o moc_serializerrunnable.cpp

moc_parserrunnable.o: moc_parserrunnable.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_parserrunnable.o moc_parserrunnable.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

